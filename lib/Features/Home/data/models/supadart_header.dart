// ignore_for_file: non_constant_identifier_names, camel_case_types, file_namesimport, file_names, unnecessary_null_comparison,prefer_null_aware_operators

// WARNING: This code is auto-generated by Supadart.
// WARNING: Modifications may be overwritten. Please make changes in the SupaDart configuration.

// SDK
import 'package:supabase_flutter/supabase_flutter.dart';

// No geobase needed
// No Intl package needed
// No Dart Convert needed
// Supadart Class
abstract class SupadartClass<T> {
  static Map<String, dynamic> insert(Map<String, dynamic> data) {
    throw UnimplementedError();
  }

  static Map<String, dynamic> update(Map<String, dynamic> data) {
    throw UnimplementedError();
  }

  factory SupadartClass.fromJson(Map<String, dynamic> json) {
    throw UnimplementedError();
  }

  static converter(List<Map<String, dynamic>> data) {
    throw UnimplementedError();
  }

  static converterSingle(Map<String, dynamic> data) {
    throw UnimplementedError();
  }
}

// Supabase Client Extension
extension SupadartClient on SupabaseClient {
  SupabaseQueryBuilder get assets => from('assets');
  SupabaseQueryBuilder get tickets => from('tickets');
  SupabaseQueryBuilder get positions => from('positions');
  SupabaseQueryBuilder get branch => from('branch');
  SupabaseQueryBuilder get users => from('users');
  SupabaseQueryBuilder get assetsAndTickets => from('assets_tickets_details');
}

// Supabase Storage Client Extension
extension SupadartStorageClient on SupabaseStorageClient {}

// Enums

// Utils
extension DurationFromString on Duration {
  static Duration fromString(String str) {
    final parts = str.split(':');
    final hours = int.parse(parts[0]);
    final minutes = int.parse(parts[1]);
    final secondsAndMilliseconds = parts[2].split('.');
    final seconds = int.parse(secondsAndMilliseconds[0]);
    final milliseconds = secondsAndMilliseconds.length > 1
        ? int.parse(secondsAndMilliseconds[1])
        : 0;

    return Duration(
      hours: hours,
      minutes: minutes,
      seconds: seconds,
      milliseconds: milliseconds,
    );
  }
}
