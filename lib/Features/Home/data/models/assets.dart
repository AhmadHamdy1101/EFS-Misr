// ignore_for_file: non_constant_identifier_names, camel_case_types, file_namesimport, file_names, unnecessary_null_comparison, prefer_null_aware_operators
// WARNING: This code is auto-generated by Supadart.
// WARNING: Modifications may be overwritten. Please make changes in the Supadart configuration.
import 'package:efs_misr/Features/Home/data/models/supadart_exports.dart';

import 'supadart_header.dart';

class Assets implements SupadartClass<Assets> {
  final BigInt id;
  final String? barcode;
  final String? name;
  final String? floor;
  final String? place;
  final BigInt? branchId;
  final DateTime createdAt;
  final String? area;
  final String? type;
  final Branch? branchObject;
  final num? amount;

  const Assets({
    required this.id,
    this.barcode,
    this.name,
    this.floor,
    this.place,
    this.branchId,
    required this.createdAt,
    this.area,
    this.type,
    this.branchObject,
    this.amount,
  });

  static String get table_name => 'assets';

  static String get c_id => 'id';

  static String get c_barcode => 'barcode';

  static String get c_name => 'name';

  static String get c_floor => 'floor';

  static String get c_place => 'place';

  static String get c_Branch => 'Branch';

  static String get c_createdAt => 'created_at';

  static String get c_area => 'area';

  static String get c_type => 'type';
  static String get c_amount => 'amount';

  static List<Assets> converter(List<Map<String, dynamic>> data) {
    return data.map(Assets.fromJson).toList();
  }

  static Assets converterSingle(Map<String, dynamic> data) {
    return Assets.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    BigInt? id,
    String? barcode,
    String? name,
    String? floor,
    String? place,
    BigInt? Branch,
    DateTime? createdAt,
    String? area,
    String? type,
    num? amount,
  }) {
    return {
      if (id != null) 'id': id.toString(),
      if (barcode != null) 'barcode': barcode,
      if (name != null) 'name': name,
      if (floor != null) 'floor': floor,
      if (place != null) 'place': place,
      if (Branch != null) 'Branch': Branch.toString(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (area != null) 'area': area,
      if (type != null) 'type': type,
      if (amount != null) 'amount': amount,
    };
  }

  static Map<String, dynamic> insert({
    BigInt? id,
    String? barcode,
    String? name,
    String? floor,
    String? place,
    BigInt? Branch,
    DateTime? createdAt,
    String? area,
    String? type,
    num? amount,
  }) {
    return _generateMap(
      id: id,
      barcode: barcode,
      name: name,
      floor: floor,
      place: place,
      Branch: Branch,
      createdAt: createdAt,
      area: area,
      type: type,
      amount: amount,
    );
  }

  static Map<String, dynamic> update({
    BigInt? id,
    String? barcode,
    String? name,
    String? floor,
    String? place,
    BigInt? Branch,
    DateTime? createdAt,
    String? area,
    String? type,
    num? amount,
  }) {
    return _generateMap(
      id: id,
      barcode: barcode,
      name: name,
      floor: floor,
      place: place,
      Branch: Branch,
      createdAt: createdAt,
      area: area,
      type: type,
      amount: amount,
    );
  }

  factory Assets.fromJson(Map<String, dynamic> jsonn) {
    return Assets(
      id: jsonn['id'] != null
          ? BigInt.parse(jsonn['id'].toString())
          : BigInt.from(0),
      barcode: jsonn['barcode'] != null ? jsonn['barcode'].toString() : null,
      name: jsonn['name'] != null ? jsonn['name'].toString() : null,
      floor: jsonn['floor'] != null ? jsonn['floor'].toString() : null,
      place: jsonn['place'] != null ? jsonn['place'].toString() : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      area: jsonn['area'] != null ? jsonn['area'].toString() : null,
      type: jsonn['type'] != null ? jsonn['type'].toString() : null,
      branchObject: jsonn['branch'] is Map<String, dynamic>
          ? Branch.fromJson(jsonn['branch'])
          : null,
      amount: jsonn['amount'] != null
          ? num.parse(jsonn['amount'].toString())
          : null,
    );
  }

  static Object New({
    BigInt? id,
    String? barcode,
    String? name,
    String? floor,
    String? place,
    BigInt? Branch,
    DateTime? createdAt,
    String? area,
    String? type,
    num? amount,
  }) {
    return {
      if (id != null) 'id': id,
      if (barcode != null) 'barcode': barcode,
      if (name != null) 'name': name,
      if (floor != null) 'floor': floor,
      if (place != null) 'place': place,
      if (Branch != null) 'Branch': Branch,
      if (createdAt != null) 'created_at': createdAt,
      if (area != null) 'area': area,
      if (type != null) 'type': type,
      if (amount != null) 'amount': amount,
    };
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      barcode: barcode,
      name: name,
      floor: floor,
      place: place,
      Branch: branchId,
      createdAt: createdAt,
      area: area,
      type: type,
      amount: amount,
    );
  }

  static const _unset = Object();

  Assets copyWith({
    Object? id = _unset,
    Object? barcode = _unset,
    Object? name = _unset,
    Object? floor = _unset,
    Object? place = _unset,
    Object? Branch = _unset,
    Object? createdAt = _unset,
    Object? area = _unset,
    Object? type = _unset,
    Object? amount = _unset,
  }) {
    return Assets(
      id: id == _unset ? this.id : id as BigInt,
      barcode: barcode == _unset ? this.barcode : barcode as String?,
      name: name == _unset ? this.name : name as String?,
      floor: floor == _unset ? this.floor : floor as String?,
      place: place == _unset ? this.place : place as String?,
      branchId: Branch == _unset ? branchId : Branch as BigInt?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime,
      area: area == _unset ? this.area : area as String?,
      type: type == _unset ? this.type : type as String?,
      amount: amount == _unset ? this.amount : amount as num?,
    );
  }
}
