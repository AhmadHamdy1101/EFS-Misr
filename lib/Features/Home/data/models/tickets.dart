// ignore_for_file: non_constant_identifier_names, camel_case_types, file_namesimport, file_names, unnecessary_null_comparison, prefer_null_aware_operators
// WARNING: This code is auto-generated by Supadart.
// WARNING: Modifications may be overwritten. Please make changes in the Supadart configuration.

import 'package:efs_misr/Features/Home/data/models/branch.dart';
import 'package:efs_misr/Features/Home/data/models/supadart_header.dart';

class Tickets implements SupadartClass<Tickets> {
  final BigInt id;
  final BigInt? orecalId;
  final String? branch;
  final Branch? branchObject;
  final DateTime? requestDate;
  final DateTime? repairDate;
  final DateTime? responseDate;
  final DateTime? repairDuration;
  final String? priority;
  final BigInt? engineer;
  final BigInt? closedBy;
  final String? damageDescription;
  final String? attachment;
  final String? comment;
  final String? status;
  final BigInt? assetId;
  final DateTime? createdAt;

  const Tickets({
    required this.id,
    this.orecalId,
    this.branch,
    this.requestDate,
    this.repairDate,
    this.responseDate,
    this.repairDuration,
    this.priority,
    this.engineer,
    this.closedBy,
    this.damageDescription,
    this.attachment,
    this.comment,
    this.status,
    this.assetId,
    this.createdAt,
    this.branchObject,
  });

  static String get table_name => 'tickets';

  static String get c_id => 'id';

  static String get c_orecalId => 'orecal_id';

  static String get c_branch => 'branch';

  static String get c_requestDate => 'request_date';

  static String get c_repairDate => 'repair_date';

  static String get c_responseDate => 'response_date';

  static String get c_repairDuration => 'repair_duration';

  static String get c_priority => 'priority';

  static String get c_engineer => 'engineer';

  static String get c_closedBy => 'closed_by';

  static String get c_damageDescription => 'damage_description';

  static String get c_attachment => 'attachment';

  static String get c_comment => 'comment';

  static String get c_status => 'status';

  static String get c_assetId => 'asset_id';

  static String get c_createdAt => 'created_at';

  static List<Tickets> converter(List<Map<String, dynamic>> data) {
    return data.map(Tickets.fromJson).toList();
  }

  static Tickets converterSingle(Map<String, dynamic> data) {
    return Tickets.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    BigInt? id,
    BigInt? orecalId,
    BigInt? branch,
    DateTime? requestDate,
    DateTime? repairDate,
    DateTime? responseDate,
    DateTime? repairDuration,
    String? priority,
    BigInt? engineer,
    BigInt? closedBy,
    String? damageDescription,
    String? attachment,
    String? comment,
    String? status,
    BigInt? assetId,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id.toString(),
      if (orecalId != null) 'orecal_id': orecalId.toString(),
      if (branch != null) 'branch': branch.toString(),
      if (requestDate != null) 'request_date': requestDate.toIso8601String(),
      if (repairDate != null) 'repair_date': repairDate.toIso8601String(),
      if (responseDate != null) 'response_date': responseDate.toIso8601String(),
      if (repairDuration != null)
        'repair_duration': repairDuration.toIso8601String(),
      if (priority != null) 'priority': priority,
      if (engineer != null) 'engineer': engineer.toString(),
      if (closedBy != null) 'closed_by': closedBy.toString(),
      if (damageDescription != null) 'damage_description': damageDescription,
      if (attachment != null) 'attachment': attachment,
      if (comment != null) 'comment': comment,
      if (status != null) 'status': status,
      if (assetId != null) 'asset_id': assetId.toString(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
    };
  }

  static Map<String, dynamic> insert({
    BigInt? id,
    BigInt? orecalId,
    BigInt? branch,
    DateTime? requestDate,
    DateTime? repairDate,
    DateTime? responseDate,
    DateTime? repairDuration,
    String? priority,
    BigInt? engineer,
    BigInt? closedBy,
    String? damageDescription,
    String? attachment,
    String? comment,
    String? status,
    BigInt? assetId,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      orecalId: orecalId,
      branch: branch,
      requestDate: requestDate,
      repairDate: repairDate,
      responseDate: responseDate,
      repairDuration: repairDuration,
      priority: priority,
      engineer: engineer,
      closedBy: closedBy,
      damageDescription: damageDescription,
      attachment: attachment,
      comment: comment,
      status: status,
      assetId: assetId,
      createdAt: createdAt,
    );
  }

  static Map<String, dynamic> update({
    BigInt? id,
    BigInt? orecalId,
    BigInt? branch,
    DateTime? requestDate,
    DateTime? repairDate,
    DateTime? responseDate,
    DateTime? repairDuration,
    String? priority,
    BigInt? engineer,
    BigInt? closedBy,
    String? damageDescription,
    String? attachment,
    String? comment,
    String? status,
    BigInt? assetId,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      orecalId: orecalId,
      branch: branch,
      requestDate: requestDate,
      repairDate: repairDate,
      responseDate: responseDate,
      repairDuration: repairDuration,
      priority: priority,
      engineer: engineer,
      closedBy: closedBy,
      damageDescription: damageDescription,
      attachment: attachment,
      comment: comment,
      status: status,
      assetId: assetId,
      createdAt: createdAt,
    );
  }

  factory Tickets.fromJson(Map<String, dynamic> jsonn) {
    return Tickets(
      id: jsonn['id'] != null
          ? BigInt.parse(jsonn['id'].toString())
          : BigInt.from(0),
      orecalId: jsonn['orecal_id'] != null
          ? BigInt.parse(jsonn['orecal_id'].toString())
          : null,
      branch: jsonn['branch_id']?.toString() ?? '',
      requestDate: jsonn['request_date'] != null
          ? DateTime.parse(jsonn['request_date'].toString())
          : null,
      repairDate: jsonn['repair_date'] != null
          ? DateTime.parse(jsonn['repair_date'].toString())
          : null,
      responseDate: jsonn['response_date'] != null
          ? DateTime.parse(jsonn['response_date'].toString())
          : null,
      repairDuration: jsonn['repair_duration'] != null
          ? DateTime.parse(jsonn['repair_duration'].toString())
          : null,
      priority: jsonn['priority'] != null ? jsonn['priority'].toString() : null,
      engineer: jsonn['engineer'] != null
          ? BigInt.parse(jsonn['engineer'].toString())
          : null,
      closedBy: jsonn['closed_by'] != null
          ? BigInt.parse(jsonn['closed_by'].toString())
          : null,
      damageDescription: jsonn['damage_description'] != null
          ? jsonn['damage_description'].toString()
          : null,
      attachment: jsonn['attachment'] != null
          ? jsonn['attachment'].toString()
          : null,
      comment: jsonn['comment'] != null ? jsonn['comment'].toString() : null,
      status: jsonn['status'] != null ? jsonn['status'].toString() : null,
      assetId: jsonn['asset_id'] != null
          ? BigInt.tryParse(jsonn['asset_id'].toString())
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      branchObject: jsonn['branch'] is Map<String, dynamic>
          ? Branch.fromJson(jsonn['branch'])
          : null,
    );
  }

  static Object New({
    BigInt? id,
    BigInt? orecalId,
    BigInt? branch,
    DateTime? requestDate,
    DateTime? repairDate,
    DateTime? responseDate,
    DateTime? repairDuration,
    String? priority,
    BigInt? engineer,
    BigInt? closedBy,
    String? damageDescription,
    String? attachment,
    String? comment,
    String? status,
    BigInt? assetId,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (orecalId != null) 'orecal_id': orecalId,
      if (branch != null) 'branch': branch,
      if (requestDate != null) 'request_date': requestDate,
      if (repairDate != null) 'repair_date': repairDate,
      if (responseDate != null) 'response_date': responseDate,
      if (repairDuration != null) 'repair_duration': repairDuration,
      if (priority != null) 'priority': priority,
      if (engineer != null) 'engineer': engineer,
      if (closedBy != null) 'closed_by': closedBy,
      if (damageDescription != null) 'damage_description': damageDescription,
      if (attachment != null) 'attachment': attachment,
      if (comment != null) 'comment': comment,
      if (status != null) 'status': status,
      if (assetId != null) 'asset_id': assetId,
      if (createdAt != null) 'created_at': createdAt,
    };
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      orecalId: orecalId,
      branch: BigInt.parse(branch!),
      requestDate: requestDate,
      repairDate: repairDate,
      responseDate: responseDate,
      repairDuration: repairDuration,
      priority: priority,
      engineer: engineer,
      closedBy: closedBy,
      damageDescription: damageDescription,
      attachment: attachment,
      comment: comment,
      status: status,
      assetId: assetId,
      createdAt: createdAt,
    );
  }

  static const _unset = Object();

  Tickets copyWith({
    Object? id = _unset,
    Object? orecalId = _unset,
    Object? branch = _unset,
    Object? requestDate = _unset,
    Object? repairDate = _unset,
    Object? responseDate = _unset,
    Object? repairDuration = _unset,
    Object? priority = _unset,
    Object? engineer = _unset,
    Object? closedBy = _unset,
    Object? damageDescription = _unset,
    Object? attachment = _unset,
    Object? comment = _unset,
    Object? status = _unset,
    Object? assetId = _unset,
    Object? createdAt = _unset,
  }) {
    return Tickets(
      id: id == _unset ? this.id : id as BigInt,
      orecalId: orecalId == _unset ? this.orecalId : orecalId as BigInt?,
      branch: branch == _unset ? this.branch : branch as String?,
      requestDate: requestDate == _unset
          ? this.requestDate
          : requestDate as DateTime?,
      repairDate: repairDate == _unset
          ? this.repairDate
          : repairDate as DateTime?,
      responseDate: responseDate == _unset
          ? this.responseDate
          : responseDate as DateTime?,
      repairDuration: repairDuration == _unset
          ? this.repairDuration
          : repairDuration as DateTime?,
      priority: priority == _unset ? this.priority : priority as String?,
      engineer: engineer == _unset ? this.engineer : engineer as BigInt?,
      closedBy: closedBy == _unset ? this.closedBy : closedBy as BigInt?,
      damageDescription: damageDescription == _unset
          ? this.damageDescription
          : damageDescription as String?,
      attachment: attachment == _unset
          ? this.attachment
          : attachment as String?,
      comment: comment == _unset ? this.comment : comment as String?,
      status: status == _unset ? this.status : status as String?,
      assetId: assetId == _unset ? this.assetId : assetId as BigInt?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime,
    );
  }
}
