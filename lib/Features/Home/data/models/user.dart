// ignore_for_file: non_constant_identifier_names, camel_case_types, file_namesimport, file_names, unnecessary_null_comparison, prefer_null_aware_operators
// WARNING: This code is auto-generated by Supadart.
// WARNING: Modifications may be overwritten. Please make changes in the Supadart configuration.

import 'package:efs_misr/Features/Home/data/models/positions.dart';
import 'package:efs_misr/Features/Home/data/models/supadart_header.dart';

class Users implements SupadartClass<Users> {
  final BigInt id;
  final String? userid;
  final String? name;
  final String? email;
  final String? password;
  final BigInt? phone;
  final String? address;
  final BigInt? positions;
  final int? role;
  final int? status;
  final DateTime createdAt;
  final Positions? position;

  const Users({
    required this.id,
    this.userid,
    this.name,
    this.email,
    this.password,
    this.phone,
    this.address,
    this.positions,
    this.role,
    this.status,
    required this.createdAt,
    this.position,
  });

  static String get table_name => 'users';
  static String get c_id => 'id';
  static String get c_userid => 'userid';
  static String get c_name => 'name';
  static String get c_email => 'email';
  static String get c_password => 'password';
  static String get c_phone => 'phone';
  static String get c_address => 'address';
  static String get c_positions => 'positions';
  static String get c_role => 'role';
  static String get c_status => 'status';
  static String get c_createdAt => 'created_at';

  static List<Users> converter(List<Map<String, dynamic>> data) {
    return data.map(Users.fromJson).toList();
  }

  static Users converterSingle(Map<String, dynamic> data) {
    return Users.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    BigInt? id,
    String? userid,
    String? name,
    String? email,
    String? password,
    BigInt? phone,
    String? address,
    BigInt? positions,
    int? role,
    int? status,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id.toString(),
      if (userid != null) 'userid': userid,
      if (name != null) 'name': name,
      if (email != null) 'email': email,
      if (password != null) 'password': password,
      if (phone != null) 'phone': phone.toString(),
      if (address != null) 'address': address,
      if (positions != null) 'positions': positions.toString(),
      if (role != null) 'role': role,
      if (status != null) 'status': status,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
    };
  }

  static Map<String, dynamic> insert({
    BigInt? id,
    String? userid,
    String? name,
    String? email,
    String? password,
    BigInt? phone,
    String? address,
    BigInt? positions,
    int? role,
    int? status,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      userid: userid,
      name: name,
      email: email,
      password: password,
      phone: phone,
      address: address,
      positions: positions,
      role: role,
      status: status,
      createdAt: createdAt,
    );
  }

  static Map<String, dynamic> update({
    BigInt? id,
    String? userid,
    String? name,
    String? email,
    String? password,
    BigInt? phone,
    String? address,
    BigInt? positions,
    int? role,
    int? status,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      userid: userid,
      name: name,
      email: email,
      password: password,
      phone: phone,
      address: address,
      positions: positions,
      role: role,
      status: status,
      createdAt: createdAt,
    );
  }

  factory Users.fromJson(Map<String, dynamic> jsonn) {
    return Users(
      id: jsonn['id'] != null
          ? BigInt.parse(jsonn['id'].toString())
          : BigInt.from(0),
      userid: jsonn['userid'] != null ? jsonn['userid'].toString() : null,
      name: jsonn['name'] != null ? jsonn['name'].toString() : null,
      email: jsonn['email'] != null ? jsonn['email'].toString() : null,
      password: jsonn['password'] != null ? jsonn['password'].toString() : null,
      phone: jsonn['phone'] != null
          ? BigInt.parse(jsonn['phone'].toString())
          : null,
      address: jsonn['address'] != null ? jsonn['address'].toString() : null,
      positions: jsonn['positions'] != null
          ? BigInt.tryParse(jsonn['positions'].toString())
          : null,
      role: jsonn['role'] != null ? int.parse(jsonn['role'].toString()) : null,
      status: jsonn['status'] != null
          ? int.parse(jsonn['status'].toString())
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      position:jsonn['positions'] != null
    ? Positions.fromJson(jsonn['positions'])
        : null,
    );
  }

  static Object New({
    BigInt? id,
    String? userid,
    String? name,
    String? email,
    String? password,
    BigInt? phone,
    String? address,
    BigInt? positions,
    int? role,
    int? status,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (userid != null) 'userid': userid,
      if (name != null) 'name': name,
      if (email != null) 'email': email,
      if (password != null) 'password': password,
      if (phone != null) 'phone': phone,
      if (address != null) 'address': address,
      if (positions != null) 'positions': positions,
      if (role != null) 'role': role,
      if (status != null) 'status': status,
      if (createdAt != null) 'created_at': createdAt,
    };
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userid: userid,
      name: name,
      email: email,
      password: password,
      phone: phone,
      address: address,
      positions: positions,
      role: role,
      status: status,
      createdAt: createdAt,
    );
  }

  static const _unset = Object();
  Users copyWith({
    Object? id = _unset,
    Object? userid = _unset,
    Object? name = _unset,
    Object? email = _unset,
    Object? password = _unset,
    Object? phone = _unset,
    Object? address = _unset,
    Object? positions = _unset,
    Object? role = _unset,
    Object? status = _unset,
    Object? createdAt = _unset,
  }) {
    return Users(
      id: id == _unset ? this.id : id as BigInt,
      userid: userid == _unset ? this.userid : userid as String?,
      name: name == _unset ? this.name : name as String?,
      email: email == _unset ? this.email : email as String?,
      password: password == _unset ? this.password : password as String?,
      phone: phone == _unset ? this.phone : phone as BigInt?,
      address: address == _unset ? this.address : address as String?,
      positions: positions == _unset ? this.positions : positions as BigInt?,
      role: role == _unset ? this.role : role as int?,
      status: status == _unset ? this.status : status as int?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime,
    );
  }
}
