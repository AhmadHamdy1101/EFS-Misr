// ignore_for_file: non_constant_identifier_names, camel_case_types, file_namesimport, file_names, unnecessary_null_comparison, prefer_null_aware_operators
// WARNING: This code is auto-generated by Supadart.
// WARNING: Modifications may be overwritten. Please make changes in the Supadart configuration.

import 'package:efs_misr/Features/Home/data/models/supadart_exports.dart';
import 'package:efs_misr/Features/Home/data/models/supadart_header.dart';

class AssetsAndTickets implements SupadartClass<AssetsAndTickets> {
  final BigInt id;
  final DateTime createdAt;
  final BigInt? assetsId;
  final BigInt? TicketsId;
  final num? Ammount;
  final List<Assets>? assets ;
  final List<Tickets>? tickets ;

  const AssetsAndTickets({
    required this.id,
    required this.createdAt,
    this.assetsId,
    this.TicketsId,
    this.Ammount,
     this.assets,
     this.tickets,
  });

  static String get table_name => 'assets_tickets_details';
  static String get c_id => 'id';
  static String get c_createdAt => 'created_at';
  static String get c_assetsId => 'assets_id';
  static String get c_TicketsId => 'Tickets_id';
  static String get c_Ammount => 'Ammount';

  static List<AssetsAndTickets> converter(List<Map<String, dynamic>> data) {
    return data.map(AssetsAndTickets.fromJson).toList();
  }

  static AssetsAndTickets converterSingle(Map<String, dynamic> data) {
    return AssetsAndTickets.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    BigInt? id,
    DateTime? createdAt,
    BigInt? assetsId,
    BigInt? TicketsId,
    num? Ammount,
  }) {
    return {
      if (id != null) 'id': id.toString(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (assetsId != null) 'assets_id': assetsId.toString(),
      if (TicketsId != null) 'Tickets_id': TicketsId.toString(),
      if (Ammount != null) 'Ammount': Ammount.toString(),
    };
  }

  static Map<String, dynamic> insert({
    BigInt? id,
    DateTime? createdAt,
    BigInt? assetsId,
    BigInt? TicketsId,
    num? Ammount,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      assetsId: assetsId,
      TicketsId: TicketsId,
      Ammount: Ammount,
    );
  }

  static Map<String, dynamic> update({
    BigInt? id,
    DateTime? createdAt,
    BigInt? assetsId,
    BigInt? TicketsId,
    num? Ammount,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      assetsId: assetsId,
      TicketsId: TicketsId,
      Ammount: Ammount,
    );
  }

  factory AssetsAndTickets.fromJson(Map<String, dynamic> jsonn) {
    return AssetsAndTickets(
      id: jsonn['id'] != null
          ? BigInt.parse(jsonn['id'].toString())
          : BigInt.from(0),
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      assetsId: jsonn['assets_id'] != null
          ? BigInt.parse(jsonn['assets_id'].toString())
          : null,
      TicketsId: jsonn['Tickets_id'] != null
          ? BigInt.parse(jsonn['Tickets_id'].toString())
          : null,
      Ammount: jsonn['Ammount'] != null
          ? num.parse(jsonn['Ammount'].toString())
          : null,
      assets: jsonn['assets'] != null
          ? (jsonn['assets'] as List)
              .map((e) => Assets.fromJson(e as Map<String, dynamic>))
              .toList()
          : [],
      tickets: jsonn['tickets'] != null
          ? (jsonn['tickets'] as List)
              .map((e) => Tickets.fromJson(e as Map<String, dynamic>))
              .toList()
          : [],
    );
  }

  static Object New({
    BigInt? id,
    DateTime? createdAt,
    BigInt? assetsId,
    BigInt? TicketsId,
    num? Ammount,
  }) {
    return {
      if (id != null) 'id': id,
      if (createdAt != null) 'created_at': createdAt,
      if (assetsId != null) 'assets_id': assetsId,
      if (TicketsId != null) 'Tickets_id': TicketsId,
      if (Ammount != null) 'Ammount': Ammount,
    };
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      assetsId: assetsId,
      TicketsId: TicketsId,
      Ammount: Ammount,
    );
  }

  static const _unset = Object();
  AssetsAndTickets copyWith({
    Object? id = _unset,
    Object? createdAt = _unset,
    Object? assetsId = _unset,
    Object? TicketsId = _unset,
    Object? Ammount = _unset,
  }) {
    return AssetsAndTickets(
      id: id == _unset ? this.id : id as BigInt,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime,
      assetsId: assetsId == _unset ? this.assetsId : assetsId as BigInt?,
      TicketsId: TicketsId == _unset ? this.TicketsId : TicketsId as BigInt?,
      Ammount: Ammount == _unset ? this.Ammount : Ammount as num?,
    );
  }
}
